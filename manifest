#!/bin/sh
#
# 2013-2017 ungleich GmbH (cdist at ungleich.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

config_name="$(cat "$__object/parameter/config")"
# Strip away any leading slashes
config="${config_name##*/}"

config_file="$__type/files/config/$config" 
proxy_config="$(cat "$__type/files/config/$config")"

dh="$(cat "$__object/parameter/dh")"
domain="$(cat "$__object/parameter/domain")"

if [ ! -f "$config_file" ]; then
    echo "Unsupported nginx configuration: $config" >&2
    exit 1
fi

if [ -f "$__object/parameter/custom-config-from-stdin" ]; then
    custom_config="$__object/stdin"
else
    custom_config=""
fi

os="$(cat "$__global/explorer/os")"
case "$os" in
    centos)
        nginx_http=/etc/nginx/conf.d/http.conf
        nginx_https=/etc/nginx/conf.d/https.conf
        nextcloud=/etc/nginx/conf.d/nextcloud.conf
        restart="systemctl restart nginx"

    ;;
    debian)
        nginx_http=/etc/nginx/sites-enabled/default
        nginx_https=/etc/nginx/sites-enabled/default-ssl
        nextcloud=/etc/nginx/sites-enabled/nextcloud
        restart="systemctl restart nginx"
    ;;
    devuan)
        nginx_http=/etc/nginx/sites-enabled/default
        nginx_https=/etc/nginx/sites-enabled/default-ssl
        nextcloud=/etc/nginx/sites-enabled/nextcloud
        restart="/etc/init.d/nginx restart"
    ;;
    *)
        echo "Unsupported OS: $os" >&2
        exit 1
    ;;
esac


################################################################################
# Nginx package
#
__package nginx --state present

base_config="$__type/files/base_config/${os}.conf"
require="__package/nginx" __file /etc/nginx/nginx.conf --source "$base_config" --mode 0644

require="__package/nginx" __start_on_boot nginx

################################################################################
# create base / switch to type dir
#
mkdir "$__object/files"
cd  "$__type/files"


################################################################################
# SSL / HTTPs configuration
#
if [ -f "$__object/parameter/ssl" ]; then
    if [ ! -f "$__object/parameter/ssl-cert" ] || [ ! -f "$__object/parameter/ssl-key" ]  || [ ! -f "$__object/parameter/dh" ]; then
	        echo "Missing parameter" >&2
        else
            
            ssl_cert="$(cat "$__object/parameter/ssl-cert")"
            ssl_key="$(cat "$__object/parameter/ssl-key")"
    
            # create symlink for SSL certificates
            require="__package/nginx" __link /etc/nginx/ssl.crt \
            --source "$ssl_cert" --type symbolic

            require="__package/nginx" __link /etc/nginx/ssl.key \
            --source "$ssl_key" --type symbolic
	    
        if [ "$config" != nextcloud ]; then
         
            # create the https nginx config
            require="__package/nginx" __file "$nginx_https"  --owner root \
            --group root \
            --mode 0644 --source - <<EOF
#                                                                    
# cdist maintained configuration - do not overwrite                  
#        

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    ssl_certificate         /etc/nginx/ssl.crt;
    ssl_certificate_key     /etc/nginx/ssl.key;
    ssl_dhparam             /etc/nginx/dhparam.pem;

    # OCSP
    ssl_stapling on;
    ssl_stapling_verify on;

    # Chipers
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:EECDH:EDH:!MD5:!RC4:!LOW:!MEDIUM:!CAMELLIA:!ECDSA:!DES:!DSS:!3DES:!NULL;
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp384r1;

    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this
    # topic first.
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;

    # Session resumption
    ssl_session_timeout 10m;
    ssl_session_cache off;
    ssl_session_tickets on;
    ssl_session_ticket_key /etc/nginx/nginx-ticketkey;

    # Compress everything [tm]
    gzip on;
    gzip_static on;
    gzip_proxied any;

    # Not for silly IE
    gzip_disable  "MSIE [1-6]\.";
    gzip_http_version 1.0;
    gzip_types text/plain text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    ${proxy_config}

    # Custom config
    # line is empty if nothing set
    ${custom_config}    
}
EOF
        else 
	      # create the Nextcloud nginx config
	      require="__package/nginx" __file "$nextcloud"  --owner root \
	      --group root \
	      --mode 0644 --source - <<EOF
#                                                                    
# cdist maintained configuration - do not overwrite                  
#        

upstream php-handler {
    server unix:/run/php/php7.0-fpm.sock;
}

server {
    listen [::]:80;
    server_name ${domain};
    # Let's encrypt
    # location /.well-known {
    #    root /var/www/nextcloud;
    #}

    # enforce https
    return 301 https://${domain}\$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name ${domain};
    ssl_certificate         /etc/nginx/ssl.crt;
    ssl_certificate_key     /etc/nginx/ssl.key;
    ssl_dhparam             /etc/nginx/dhparam.pem;

    # OCSP
    ssl_stapling on;
    ssl_stapling_verify on;

    # Chipers
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:EECDH:EDH:!MD5:!RC4:!LOW:!MEDIUM:!CAMELLIA:!ECDSA:!DES:!DSS:!3DES:!NULL;
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp384r1;

    # Add headers to serve security related headers
    # Before enabling Strict-Transport-Security headers please read into this
    # topic first.
    add_header Strict-Transport-Security "max-age=15768000;
    includeSubDomains; preload;";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;

    # Session resumption
    ssl_session_timeout 10m;
    ssl_session_cache off;
    ssl_session_tickets on;
    ssl_session_ticket_key /etc/nginx/nginx-ticketkey;

    # Path to the root of your installation
    root /var/www/nextcloud/;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # The following 2 rules are only needed for the user_webfinger app.
    # Uncomment it if you're planning to use this app.
    #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json
    # last;

    location = /.well-known/carddav {
      return 301 \$scheme://\$host/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 \$scheme://\$host/remote.php/dav;
    }

    # set max upload size
    client_max_body_size 512M;
    fastcgi_buffers 64 4K;

    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
        fastcgi_param HTTPS on;
        #Avoid sending the security headers twice
        fastcgi_param modHeadersAvailable true;
        fastcgi_param front_controller_active true;
        fastcgi_pass php-handler;
        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }

    location ~ ^/(?:updater|ocs-provider)(?:$|/) {
        try_files \$uri/ =404;
        index index.php;
    }

    # Adding the cache control header for js and css files
    # Make sure it is BELOW the PHP block
    location ~* \.(?:css|js|woff|svg|gif)$ {
        try_files \$uri /index.php\$uri\$is_args\$args;
        add_header Cache-Control "public, max-age=7200";
        add_header Strict-Transport-Security "max-age=15768000;
        includeSubDomains; preload;";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Robots-Tag none;
        add_header X-Download-Options noopen;
        add_header X-Permitted-Cross-Domain-Policies none;
        # Optional: Don't log access to assets
        access_log off;
    }

    location ~* \.(?:png|html|ttf|ico|jpg|jpeg)$ {
        try_files \$uri /index.php\$uri\$is_args\$args;
        # Optional: Don't log access to other assets
        access_log off;
    }
    # Nextcloud config

    location = /.well-known/carddav {
      return 301 \$scheme://\$host/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 \$scheme://\$host/remote.php/dav;
    }
    
    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # Uncomment if your server is build with the ngx_pagespeed module
    # This module is currently not supported.
    #pagespeed off;

    location / {
        rewrite ^ /index.php\$uri;
    }
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
        deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
        deny all;
    }

    location ~* \.(?:png|html|ttf|ico|jpg|jpeg)$ {
        try_files \$uri /index.php\$uri\$is_args\$args;
        # Optional: Don't log access to other assets
        access_log off;
    }

    # Custom config
    # empty if not set 
    ${custom_config}    
}
EOF
        fi
    fi  
    if [ ! -f "$__object/parameter/ssl-no-redirect" ]; then
        if [ -f "$__object/parameter/ssl-custom-redirect" ]; then
            ssl_redirect_host=$(cat "$__object/parameter/ssl-custom-redirect")
        else
            ssl_redirect_host='$host'
        fi

        ssl_redirect_file="$__object/files/nginx-redirect-http-to-https"
        echo "    rewrite ^ https://$ssl_redirect_host\$request_uri? permanent;" > "$ssl_redirect_file"
        ssl_redirect_file_content=$(cat $ssl_redirect_file)
    fi
else
    ssl_redirect_file=""
fi

################################################################################
# HTTP configuration
#
# Create HTTP configuration file

if [ "$config" != nextcloud ]; then
    require="__package/nginx" __file "$nginx_http"  --owner root \
            --group root \
            --mode 0644 --source - <<EOF
#                                                                    
# cdist maintained configuration - do not overwrite                  
#
        
server {
    listen 80;
    listen [::]:80;

    # Compress everything [tm]
    gzip on;
    gzip_static on;
    gzip_proxied any;

    # Not for silly IE
    gzip_disable  "MSIE [1-6]\.";
    gzip_http_version 1.0;
    gzip_types text/plain text/xml text/css
               text/comma-separated-values
               text/javascript application/x-javascript
               application/atom+xml;

    # SSL redirect
    # line is empty if not redirect
    ${ssl_redirect_file_content}

    ${proxy_config}

    # Custom config
    # line is empty if nothing set
    ${custom_config}    
}
EOF
fi
